from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.markdown import text, code, italic
from aiogram.types import ParseMode
from aiogram.types.message import ContentType
from sqlalchemy import func
from config import TOKEN
from kb import Standart_keyboard, Delivery, inline_keyboard1,\
            taste_keyboard, time_of_deliveo, inline_keyboard2,\
             inline_keyboard3, inline_keyboard4


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º(–≤—ã–±–æ—Ä –∫–∞–ª—å—è–Ω–æ–≤)
@dp.message_handler(commands=['start'])
async def proccess_start_command(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–∞–ª—å—è–Ω–∞ ‚öñÔ∏è", reply_markup=Standart_keyboard)
    await bot.send_photo(message.from_user.id, photo=open('static\hookah.jpg', 'rb'))

#–≤—ã–±–æ—Ä –≤–∫—É—Å–∞ –∫–∞–ª—å—è–Ω–∞
@dp.message_handler(commands=['taste'])
async def proccess_taste_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∫–∞–ª—å—è–Ω–∞ üíé", reply_markup=taste_keyboard)

#–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(commands=['time'])
async def proccess_time_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)

#–¥–æ—Å—Ç–∞–≤–∫–∞
@dp.message_handler(commands=['delivery'])
async def proccess_delivery_command(message: types.Message):
    await message.reply("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üìú", reply_markup=Delivery)

# —Å–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑
@dp.message_handler(commands=['thank'])
async def proccess_thank_command(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

#–¥–æ—Å—Ç—É–ø–Ω—ã–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
@dp.message_handler(commands=['help'])
async def proccess_help_command(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∫–∞–ª—å—è–Ω–∞ üî•",
                        reply_markup=inline_keyboard1) 
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∫–∞–ª—å—è–Ω–∞ üî•",
                        reply_markup=inline_keyboard2) 
    await message.reply("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üî•",
                        reply_markup=inline_keyboard3)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üî•",
                        reply_markup=inline_keyboard4)


@dp.message_handler()
async def hookah_taste(message: types.Message):
    if message.text == "–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚úàÔ∏è":
        await bot.send_photo(message.from_user.id, photo=open('static\standart.jpg', 'rb'))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∫–∞–ª—å—è–Ω–∞ üíé", reply_markup=taste_keyboard)
    if message.text == "–ü—Ä–µ–º–∏—É–º üöÄ":
        await bot.send_photo(message.from_user.id, photo=open('static\premium.jpg', 'rb'))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∫–∞–ª—å—è–Ω–∞ üíé", reply_markup=taste_keyboard)
    if message.text == "–ü—Ä–µ–º–∏—É–º + üõ∏":
        await bot.send_photo(message.from_user.id, photo=open('static\premium_plus.jpg', 'rb'))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –∫–∞–ª—å—è–Ω–∞ üíé", reply_markup=taste_keyboard)
    if message.text == "–°–≤–µ–∂–∏–π üßäüå±":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–ö–∏—Å–ª—ã–π üçãüçá":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–°–ª–∞–¥–∫–∏–π ü•ùü•≠":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–ü—Ä—è–Ω—ã–π ü•¨ü•¶":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–î–µ—Å–µ—Ä—Ç–Ω—ã–π üç´üç¶":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–ê–≤—Ç–æ—Ä—Å–∫–∏–π üçîüå≠":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üéÅ", reply_markup=time_of_deliveo)
    if message.text == "–ü—Ä–∏–≤–µ–∑—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç 6Ô∏è‚É£0Ô∏è‚É£":
        await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üìú", reply_markup=Delivery)
    if message.text == "–ü—Ä–∏–≤–µ–∑—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 120 –º–∏–Ω—É—Ç 1Ô∏è‚É£2Ô∏è‚É£0Ô∏è‚É£":
        await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üìú", reply_markup=Delivery)
    if message.text == "–ü—Ä–∏–≤–µ–∑—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 180 –º–∏–Ω—É—Ç 1Ô∏è‚É£8Ô∏è‚É£0Ô∏è‚É£":
        await message.answer("–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ üìú", reply_markup=Delivery)

# –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
# @dp.message_handler()
# async def proccess_order_command(message: types.Message):
#     if message.text == None:
#         message_text = text(
#             ("–°–ø–∞—Å–∏–±–æ. –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç."),
#             )   
#     await message.answer(message_text, parse_mode=ParseMode.MARKDOWN)

#–ø–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π
@dp.message_handler()
async def echo_messege(message: types.Message):
    message_text = text(
        ("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."),
        italic("\n–ù–∞–ø–æ–º–∏–Ω–∞—é, –∫–∞–∫–∏–µ –µ—Å—Ç—å –≤–∏–¥—ã –¥–µ–π—Å—Ç–≤–∏–π:"),
        code("/help")
        )   
    await message.reply(message_text, parse_mode=ParseMode.MARKDOWN)  


if __name__ == "__main__":
    executor.start_polling(dp) 